// generated by jsonenums -type=Importance; DO NOT EDIT

package cabot

import (
	"encoding/json"
	"fmt"
)

var (
	_ImportanceNameToValue = map[string]Importance{
		"WARNING":  WARNING,
		"ERROR":    ERROR,
		"CRITICAL": CRITICAL,
	}

	_ImportanceValueToName = map[Importance]string{
		WARNING:  "WARNING",
		ERROR:    "ERROR",
		CRITICAL: "CRITICAL",
	}
)

func init() {
	var v Importance
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ImportanceNameToValue = map[string]Importance{
			interface{}(WARNING).(fmt.Stringer).String():  WARNING,
			interface{}(ERROR).(fmt.Stringer).String():    ERROR,
			interface{}(CRITICAL).(fmt.Stringer).String(): CRITICAL,
		}
	}
}

// MarshalJSON is generated so Importance satisfies json.Marshaler.
func (r Importance) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ImportanceValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Importance: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Importance satisfies json.Unmarshaler.
func (r *Importance) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Importance should be a string, got %s", data)
	}
	v, ok := _ImportanceNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Importance %q", s)
	}
	*r = v
	return nil
}
